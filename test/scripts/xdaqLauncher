#!/usr/bin/perl -w
use Sys::Hostname;
use IO::Socket;
use POSIX ":sys_wait_h";
use Errno;
use strict;

die "Error: XDAQ_ROOT not set\n" if (!exists $ENV{XDAQ_ROOT});
die "Error: XDAQ_DOCUMENT_ROOT not set\n" if (!exists $ENV{XDAQ_DOCUMENT_ROOT});
die "Usage: xdaqLauncher listenport\n" if @ARGV != 1;

my $listenport     = $ARGV[0];
my $xdaqdied       = 0;
my $xdaqexitvalue  = 0;
my $xdaqsignalnum  = 0;
my $xdaqsignalname = "NOT SET";
my $xdaqcoredumped = 0;
my $xdaqpid        = 0;
my $host           = hostname;

sub reaper {
  my $waitpid = waitpid(-1, WNOHANG);

  if($waitpid == -1)
  {
     # No child is waiting.  Do nothing.
  } elsif(($xdaqpid != 0) && ($waitpid == $xdaqpid)) {
    $xdaqdied       = 1;
    $xdaqexitvalue  = $? >> 8;
    $xdaqsignalnum  = $? & 127;
    $xdaqsignalname = &getSignalName($xdaqsignalnum);
    if($? & 128) {
      $xdaqcoredumped = 1;
    }
  }

  $SIG{CHLD} = \&reaper;
}


sub getSignalName {
  my($num) = @_;
  my @names = qw/
    UNKNOWN
    SIGHUP
    SIGINT
    SIGQUIT
    SIGILL
    UNKNOWN
    SIGABRT
    UNKNOWN
    SIGFPE
    SIGKILL
    UNKNOWN
    SIGSEGV
    UNKNOWN
    SIGPIPE
    SIGALRM
    SIGTERM/;
  my $name = "UNKNOWN";

  if($num > 15) {
    $name = "UNKNOWN";
  } else {
    $name = $names[$num];
  }
}


sub processClientRequest {
  my($client)                 = @_;
  my $cmd                     = <$client>;
  my $continueRunningLauncher = 1;
  my $xdaqport                = 0;
  chomp $cmd;

  if($cmd =~ /STARTXDAQ(\d+)/)
  {
    $xdaqport = $1;

    if($xdaqpid && (!$xdaqdied))
    {
      print $client "CANNOT START XDAQ - ALREADY RUNNING\n";
    }
    else
    {
      print $client "STARTING XDAQ\n";

      $xdaqdied = 0;

      defined($xdaqpid = fork) or die "Failed to fork: $!";
      unless ($xdaqpid) {
        close($client);
	my $numactl="";
	my $cores="";
        my $cpu="";
	if ($ENV{TEST_TYPE} eq "IB") {
               if ($host eq "dvbu-c2f34-28-01" || $host eq "dvru-c2f33-28-01") {
                        #$cores="6,8,10,12,14";
                        #$cpu="0"
                        $cores="3,5,11,13,15";
                        $cpu="1"
                } elsif ($host =~ "dvrubu-c2f33-.*") {
                        $cores="11,12,13,14,15";
                        $cpu="1";
                } elsif ($host =~ "dvrubu-c2f34-.*") {
                        $cores="3,4,5,6,7";
                        $cpu="0";
                } elsif ($host =~ "dveferol-c2f36-.*" ) {
                        #$cores="0,1,2";
                        #$numactl="taskset -c $cores";
                        $numactl=" ";
                } else {
                        #$cores="8,9,10,11,12,13,14,15";
                        #$cpu="1";
                        #$cores="2,3,5,6";
                        $cores="9,10,12,13";
                        $cpu="1";
                }
	        $numactl="numactl --physcpubind=$cores --membind=$cpu" if $numactl eq "";
	        #$numactl="numactl --physcpubind=$cores --localalloc" if $numactl eq "";
	} elsif ($ENV{TEST_TYPE} eq "40GE"){
		if ($host eq "dveb-b1b04-22-01") {
                	$cores="7,9,13,15";
                	$cpu="1";
	  		$numactl="numactl --physcpubind=$cores --membind=$cpu";
        	} elsif ($host eq "dveb-b1b04-10-03") {
			#$cores="0,1,2,3,5,6,7";
			$cores="2,3,5,6";
			$cpu="0";
	  		$numactl="numactl --physcpubind=$cores --membind=$cpu";
		} else {
			$cores="0,1,2,3";
			$numactl="taskset -c $cores";
		}
	}
		
        #print "$numactl $ENV{XDAQ_ROOT}/bin/xdaq.exe -e $ENV{XDAQ_ROOT}/etc/default.profile -p $xdaqport";

        close($client);
        exec "$numactl $ENV{XDAQ_ROOT}/bin/xdaq.exe -e $ENV{XDAQ_ROOT}/etc/default.profile -p $xdaqport";
        die "Failed to exec: $!";
      }
    }
  } elsif($cmd =~ /STOPXDAQ/) {
    if($xdaqdied) {
      print $client "XDAQ ALREADY DIED - PID: $xdaqpid";
      print $client " exit value: $xdaqexitvalue";
      print $client " signal num: $xdaqsignalnum";
      print $client " signal name: $xdaqsignalname";
      print $client " core dumped: $xdaqcoredumped\n";

      $xdaqdied = 0;
      $xdaqpid  = 0;
    } elsif($xdaqpid == 0) {
      print $client "CANNOT STOP XDAQ - NOT RUNNING\n";
    } else {
      print $client "STOPPING XDAQ\n";

      kill 9 =>$xdaqpid;

      while($xdaqdied == 0) {
        # Do nothing
      }

      $xdaqpid = 0;
    }
  } elsif($cmd =~ /GETXDAQSTATUS/) {
    if($xdaqdied) {
      print $client "XDAQ DIED - PID: $xdaqpid";
      print $client " exit value: $xdaqexitvalue";
      print $client " signal num: $xdaqsignalnum";
      print $client " signal name: $xdaqsignalname";
      print $client " core dumped: $xdaqcoredumped\n";
    } elsif($xdaqpid) {
      print $client "XDAQ IS RUNNING - PID: $xdaqpid\n";
    } else {
      print $client "XDAQ IS NOT RUNNING\n";
    }
  } elsif($cmd =~ /STOPLAUNCHER/) {
    if($xdaqpid) {
      print $client "STOPPING XDAQ AND THEN LAUNCHER\n";

      kill 9 =>$xdaqpid;

      while($xdaqdied == 0) {
        # Do nothing
      }

      $xdaqpid = 0; # Not needed as launcher is about to stop
    } else {
      print $client "STOPPING LAUNCHER - XDAQ IS NOT RUNNING\n";
    }
    $continueRunningLauncher = 0;
  }
  else
  {
    print $client "UNKNOWN COMMAND\n";
  }

  $continueRunningLauncher;
}


$SIG{CHLD} = \&reaper;

my $server = IO::Socket::INET->new(LocalPort => $listenport,
                                   Type      => SOCK_STREAM,
                                   Reuse     => 1,
                                   Listen    => 10)
  or die "Failed to create server socket $@\n";



my $systemCallInterrupted   = 1; # Go through while loop at least once
my $continueRunningLauncher = 1;
my $client;

while($systemCallInterrupted && $continueRunningLauncher) {
  $systemCallInterrupted = 0;

  while($continueRunningLauncher && ($client = $server->accept())) {
    $continueRunningLauncher = &processClientRequest($client);

    close($client);
  }

  # $server->accept may have returned due to a signal
  if(!defined($client)) {
    if($! =~ /Interrupted system call/) {
      $systemCallInterrupted = 1;
    }
  }
}

close($server);
print "xdaqLauncher STOPPED\n";
